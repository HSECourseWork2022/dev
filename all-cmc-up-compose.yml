version: "3.9"

networks:
  app-tier:
    driver: bridge
services:
  cmc_producer:
    container_name: cmc-producer
    image: "yawkar/cmc-producer"
    networks:
      - app-tier
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - PRODUCER_SOURCE=cmc
      - PRODUCER_SUBTHEME=cryptocurrency
      - CMC_API_KEY=
    depends_on:
      - kafka

  cmc-filter:
    container_name: cmc-filter-container
    image: "yawkar/cmc-filter"
    networks:
      - app-tier
    environment:
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP-ID=cmc-filters
    depends_on:
      - kafka

  cryptocurrency-loader:
    container_name: cryptocurrency-loader-container
    image: "yawkar/cryptocurrency-loader"
    networks:
      - app-tier
    ports:
      - "8081:8081"
    environment:
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP-ID=cryptocurrency-loaders
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgrescontainer:5432/cryptocurrency
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - LOADER_SUBTHEME=cryptocurrency
    depends_on:
      - kafka
      - postgres

  report-builder:
    container_name: report-builder
    image: "yawkar/report-builder"
    networks:
      - app-tier
    ports:
      - "8000:8000"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgrescontainer:5432/cryptocurrency
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SERVER_PORT=8000
    depends_on:
      - postgres

  zookeeper:
    container_name: zookeeper
    image: "bitnami/zookeeper:latest"
    networks:
      - app-tier
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"

  kafka:
    container_name: kafka
    image: "bitnami/kafka:3.0.0"
    networks:
      - app-tier
    ports:
      - "9093:9093"
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

  kafka-ui:
    container_name: kafka-ui
    image: "provectuslabs/kafka-ui"
    networks:
      - app-tier
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    restart: unless-stopped
    depends_on:
      - kafka

  postgres:
    container_name: postgrescontainer
    image: postgres:14-alpine
    networks:
      - app-tier
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=cryptocurrency
      - POSTGRES_HOST_AUTH_METHOD=trust
      
  db-migrations:
    container_name: liquibase-container
    image: yawkar/db-migrations
    networks:
      - app-tier
    environment:
      - DB_URL=postgrescontainer:5432
      - JDBC_URL=jdbc:postgresql://postgrescontainer:5432/cryptocurrency
      - USERNAME=postgres  
      - PASSWORD=postgres
    links:
      - postgres
    depends_on:
      - postgres
    
  prometheus:
    image: bitnami/prometheus:2.42.0
    container_name: prometheuscoursework
    ports:
      - "1000:1000"
    command:
      - --web.listen-address=:10000
      - --storage.tsdb.path=/prometheus
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus_data:/opt/bitnami/prometheus/data
    networks:
      - app-tier

  grafana:
    image: bitnami/grafana:9.4.3
    container_name: grafanacoursework
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECUTIRY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana_data:/opt/bitnami/grafana/data
      - ./monitoring/grafana/provisioning:/opt/bitnami/grafana/conf/provisioning
    networks:
      - app-tier
    depends_on:
      - prometheus
